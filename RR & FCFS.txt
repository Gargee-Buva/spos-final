1.  Round Robin is a preemptive scheduling algorithm where each process is assigned a fixed time to execute, called the time quantum. If a process doesn’t finish within its time quantum, it’s moved to the end of the queue to wait for the next round.

2.  FCFS scheduling serves processes in the order they arrive in the queue. The process that arrives first will be completed first. This approach is simple, but it can lead to long waiting times for processes arriving later

------------------------------------------------------------------------------------------------------------------

import java.util.Scanner;

public class cpu {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        System.out.println("Choose Scheduling Algorithm:");
        System.out.println("1. First-Come, First-Served (FCFS)");
        System.out.println("2. Round Robin");
        int choice = sc.nextInt();

        System.out.print("Enter the number of processes: ");
        int n = sc.nextInt();

        int[] arrivalTime = new int[n];
        int[] burstTime = new int[n];
        int[] completionTime = new int[n];
        int[] turnAroundTime = new int[n];
        int[] waitingTime = new int[n];

        System.out.println("Enter arrival times and burst times for each process:");
        for (int i = 0; i < n; i++) {
            System.out.print("Process " + (i + 1) + " Arrival Time: ");
            arrivalTime[i] = sc.nextInt();
            System.out.print("Process " + (i + 1) + " Burst Time: ");
            burstTime[i] = sc.nextInt();
        }

        if (choice == 1) {
            fcfsScheduling(arrivalTime, burstTime, completionTime, turnAroundTime, waitingTime, n);
        } else if (choice == 2) {
            System.out.print("Enter the time quantum: ");
            int quantum = sc.nextInt();
            int[] remainingTime = burstTime.clone(); // Track remaining burst time
            roundRobinScheduling(arrivalTime, burstTime, remainingTime, completionTime, turnAroundTime, waitingTime, quantum, n);
        } else {
            System.out.println("Invalid choice.");
        }
        sc.close();
    }

    // FCFS Scheduling Algorithm
    public static void fcfsScheduling(int[] arrivalTime, int[] burstTime, int[] completionTime, int[] turnAroundTime, int[] waitingTime, int n) {
        int currentTime = 0;

        for (int i = 0; i < n; i++) {
            // If the current time is less than the arrival time of the process, we wait until the process arrives.
            if (currentTime < arrivalTime[i]) {
                currentTime = arrivalTime[i];
            }

            // Calculate completion time of the current process
            completionTime[i] = currentTime + burstTime[i];
            currentTime = completionTime[i];  // Update current time to completion time of the current process

            // Calculate Turnaround Time and Waiting Time
            turnAroundTime[i] = completionTime[i] - arrivalTime[i];
            waitingTime[i] = turnAroundTime[i] - burstTime[i];
        }

        displayResults("FCFS", arrivalTime, burstTime, completionTime, waitingTime, turnAroundTime, n);
    }

    // Round Robin Scheduling Algorithm
    public static void roundRobinScheduling(int[] arrivalTime, int[] burstTime, int[] remainingTime, int[] completionTime, int[] turnAroundTime, int[] waitingTime, int quantum, int n) {
        int currentTime = 0;
        boolean done;

        do {
            done = true;
            for (int i = 0; i < n; i++) {
                // Process is considered only if it has arrived and has remaining time
                if (remainingTime[i] > 0 && arrivalTime[i] <= currentTime) {
                    done = false; // Process remains to be executed
                    if (remainingTime[i] > quantum) {
                        // Execute for a time quantum
                        currentTime += quantum;
                        remainingTime[i] -= quantum;
                    } else {
                        // Complete the process
                        currentTime += remainingTime[i];
                        completionTime[i] = currentTime;
                        remainingTime[i] = 0;
                    }
                }
            }
        } while (!done); // Loop until all processes are done

        // Calculate Turnaround Time and Waiting Time
        for (int i = 0; i < n; i++) {
            turnAroundTime[i] = completionTime[i] - arrivalTime[i];
            waitingTime[i] = turnAroundTime[i] - burstTime[i];
        }

        displayResults("Round Robin", arrivalTime, burstTime, completionTime, waitingTime, turnAroundTime, n);
    }

    // Display Results
    public static void displayResults(String algorithm, int[] arrivalTime, int[] burstTime, int[] completionTime, int[] waitingTime, int[] turnAroundTime, int n) {
        System.out.println("\n" + algorithm + " Scheduling Results:");
        System.out.println("Process\tArrival Time\tBurst Time\tCompletion Time\tWaiting Time\tTurnaround Time");

        int totalWaitingTime = 0, totalTurnAroundTime = 0;
        for (int i = 0; i < n; i++) {
            totalWaitingTime += waitingTime[i];
            totalTurnAroundTime += turnAroundTime[i];
            System.out.println((i + 1) + "\t\t" + arrivalTime[i] + "\t\t" + burstTime[i] + "\t\t" + completionTime[i] + "\t\t" + waitingTime[i] + "\t\t" + turnAroundTime[i]);
        }

        System.out.println("\nAverage Waiting Time: " + (float) totalWaitingTime / n);
        System.out.println("Average Turnaround Time: " + (float) totalTurnAroundTime / n);
    }
}
---------------------------------------------------------------------------------------------------------------


Share


The code provided implements two CPU scheduling algorithms: First-Come, First-Served (FCFS) and Round Robin (RR). Here’s a step-by-step breakdown of how each algorithm functions in the code:

1. First-Come, First-Served (FCFS) Scheduling Algorithm
The FCFS algorithm schedules processes in the order of their arrival times. The steps involved in this implementation are:

Initialize currentTime to track the ongoing time in the system.
For each process i:
Wait for Arrival: If currentTime is less than the process’s arrival time, the system will wait until the process arrives.
Calculate Completion Time: Update completionTime[i] to be the sum of currentTime and the burst time of the current process. Set currentTime to this new completion time.
Calculate Turnaround and Waiting Time: Use the formulas:
turnAroundTime[i] = completionTime[i] - arrivalTime[i]
waitingTime[i] = turnAroundTime[i] - burstTime[i]
Display Results: After completing all processes, the function calculates the total waiting time and turnaround time and prints the results.


2. Round Robin (RR) Scheduling Algorithm
In the Round Robin scheduling, processes are executed in a circular order, each receiving a fixed amount of CPU time (quantum). The steps for Round Robin are:

Initialize currentTime and a done flag.
Loop until all processes are completed (i.e., until done remains true):
For each process i:
Check if the process has arrived (arrivalTime[i] <= currentTime) and still has remaining burst time (remainingTime[i] > 0).
If the process's remaining time exceeds the quantum, execute it for the time quantum, reduce its remaining time, and increment currentTime by the quantum.
If the remaining time is less than or equal to the quantum, complete the process by incrementing currentTime by the remaining time, setting completionTime[i] to currentTime, and marking the process as completed (remainingTime[i] = 0).
Calculate Turnaround and Waiting Time: After all processes are completed, calculate each process’s turnaround and waiting time similarly to FCFS.
Display Results: Calculate the average waiting and turnaround times, and display them.
Key Methods
fcfsScheduling: Implements the FCFS algorithm.
roundRobinScheduling: Implements the Round Robin algorithm.
displayResults: Prints the results, including process-wise arrival, burst, completion, waiting, and turnaround times, along with average waiting and turnaround times.
This code allows the user to select the scheduling algorithm, input process details, and get the scheduling results based on the selected algorithm.


NOTE :-
The condition arrivalTime[i] <= currentTime (or arrivalTime[i] < currentTime) is checked to ensure that a process has actually arrived in the system before it can be scheduled. This condition prevents the CPU from trying to execute processes that have not yet arrived, which is especially relevant in scheduling algorithms like First-Come, First-Served (FCFS) and Round Robin.e.g

Process A with arrivalTime = 3 and burstTime = 5
Process B with arrivalTime = 6 and burstTime = 4
If currentTime is 4, only Process A should be eligible for scheduling since it has arrived. Process B, which has an arrival time of 6, will only be eligible once currentTime reaches or exceeds 6.






